
ShakinCube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005fa  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000045b  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000355  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031b  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c8  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000182b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__vector_2>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>

00000014 <Numbers>:
  14:	ef f7 e7 f3 e3 f1                                   ......

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e9       	ldi	r28, 0x9F	; 159
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a4 e6       	ldi	r26, 0x64	; 100
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 92       	st	X+, r1

0000002c <.do_clear_bss_start>:
  2c:	a6 36       	cpi	r26, 0x66	; 102
  2e:	b2 07       	cpc	r27, r18
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ed       	ldi	r30, 0xD8	; 216
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>
  48:	84 d0       	rcall	.+264    	; 0x152 <main>
  4a:	c4 c1       	rjmp	.+904    	; 0x3d4 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <Init_INT0>:
    }
}

void Init_INT0(void)
{
	PCMSK = (1<<PCINT0); // Choose Pin Change Interrupt
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	85 bb       	out	0x15, r24	; 21
	GIMSK = (1<<PCIE); // Enable Pin Change Interrupt
  52:	80 e2       	ldi	r24, 0x20	; 32
  54:	8b bf       	out	0x3b, r24	; 59
	sei();
  56:	78 94       	sei
  58:	08 95       	ret

0000005a <__vector_2>:
}

ISR(PCINT0_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
	Interrupt |= PINCHANGE0; // Save, Pin Change Interrupt was triggered 
  66:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}
  70:	8f 91       	pop	r24
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <Sleep>:
	Sleep();
}

void Sleep(void)
{
	CLEAR_PCINT0_FLAG;
  7c:	8a b7       	in	r24, 0x3a	; 58
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	8a bf       	out	0x3a, r24	; 58

	LED_DDR	&= ~((1<<PB4) | (1<<PB3) | (1<<PB2) | (1<<PB1) | (1<<PB0));
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 7e       	andi	r24, 0xE0	; 224
  86:	87 bb       	out	0x17, r24	; 23
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  88:	85 b7       	in	r24, 0x35	; 53
  8a:	87 7e       	andi	r24, 0xE7	; 231
  8c:	80 61       	ori	r24, 0x10	; 16
  8e:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
  90:	85 b7       	in	r24, 0x35	; 53
  92:	80 62       	ori	r24, 0x20	; 32
  94:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
  96:	88 95       	sleep
	sleep_disable();
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	85 bf       	out	0x35, r24	; 53
	
	LED_DDR	|= ((1<<PB4) | (1<<PB3) | (1<<PB2) | (1<<PB1));
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	8e 61       	ori	r24, 0x1E	; 30
  a2:	87 bb       	out	0x17, r24	; 23
	LED_DDR	&= ~(1<<PB0);
  a4:	b8 98       	cbi	0x17, 0	; 23
	PULLUP_ON;	
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	08 95       	ret

000000aa <ShakeIt>:
{
	Interrupt |= PINCHANGE0; // Save, Pin Change Interrupt was triggered 
}

void ShakeIt(void)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	uint8_t Result = 0x00;
	
	for (Cnt = 0 ; Cnt < 10 ; Cnt++)
  ae:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Cnt>
  b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
  b6:	8a 30       	cpi	r24, 0x0A	; 10
  b8:	e0 f4       	brcc	.+56     	; 0xf2 <ShakeIt+0x48>
	{
		Result = rand() % 6;
  ba:	c6 e0       	ldi	r28, 0x06	; 6
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	c5 d0       	rcall	.+394    	; 0x24a <rand>
  c0:	be 01       	movw	r22, r28
  c2:	5b d0       	rcall	.+182    	; 0x17a <__divmodhi4>
  c4:	28 2f       	mov	r18, r24
		LED_PORT = pgm_read_byte(&Numbers[Result]);
  c6:	99 27       	eor	r25, r25
  c8:	fc 01       	movw	r30, r24
  ca:	ec 5e       	subi	r30, 0xEC	; 236
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	e4 91       	lpm	r30, Z
  d0:	e8 bb       	out	0x18, r30	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	95 e0       	ldi	r25, 0x05	; 5
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <ShakeIt+0x2c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <ShakeIt+0x32>
  dc:	00 00       	nop

void ShakeIt(void)
{
	uint8_t Result = 0x00;
	
	for (Cnt = 0 ; Cnt < 10 ; Cnt++)
  de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Cnt>
  e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	38 f3       	brcs	.-50     	; 0xbe <ShakeIt+0x14>
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <ShakeIt+0x4a>
	Interrupt |= PINCHANGE0; // Save, Pin Change Interrupt was triggered 
}

void ShakeIt(void)
{
	uint8_t Result = 0x00;
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	af e7       	ldi	r26, 0x7F	; 127
  f6:	bb eb       	ldi	r27, 0xBB	; 187
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <ShakeIt+0x4e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ShakeIt+0x54>
  fe:	00 00       	nop
		_delay_ms(45);
	}
	
	_delay_ms(1500);
	
	for (Cnt = 0 ; Cnt < 6 ; Cnt++)
 100:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Cnt>
 104:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
 108:	86 30       	cpi	r24, 0x06	; 6
 10a:	e8 f4       	brcc	.+58     	; 0x146 <ShakeIt+0x9c>
	{
		LED_PORT = LED_OFF;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
		_delay_ms(150);
		LED_PORT =	pgm_read_byte(&Numbers[Result]);
 10e:	e2 2f       	mov	r30, r18
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ec 5e       	subi	r30, 0xEC	; 236
 114:	ff 4f       	sbci	r31, 0xFF	; 255
	
	_delay_ms(1500);
	
	for (Cnt = 0 ; Cnt < 6 ; Cnt++)
	{
		LED_PORT = LED_OFF;
 116:	98 bb       	out	0x18, r25	; 24
 118:	af eb       	ldi	r26, 0xBF	; 191
 11a:	b2 e1       	ldi	r27, 0x12	; 18
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <ShakeIt+0x72>
 120:	00 c0       	rjmp	.+0      	; 0x122 <ShakeIt+0x78>
 122:	00 00       	nop
		_delay_ms(150);
		LED_PORT =	pgm_read_byte(&Numbers[Result]);
 124:	84 91       	lpm	r24, Z
 126:	88 bb       	out	0x18, r24	; 24
 128:	af eb       	ldi	r26, 0xBF	; 191
 12a:	b2 e1       	ldi	r27, 0x12	; 18
 12c:	11 97       	sbiw	r26, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <ShakeIt+0x82>
 130:	00 c0       	rjmp	.+0      	; 0x132 <ShakeIt+0x88>
 132:	00 00       	nop
		_delay_ms(45);
	}
	
	_delay_ms(1500);
	
	for (Cnt = 0 ; Cnt < 6 ; Cnt++)
 134:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Cnt>
 13e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Cnt>
 142:	86 30       	cpi	r24, 0x06	; 6
 144:	40 f3       	brcs	.-48     	; 0x116 <ShakeIt+0x6c>
		_delay_ms(150);
		LED_PORT =	pgm_read_byte(&Numbers[Result]);
		_delay_ms(150);
	}
	
	LED_PORT = LED_OFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	88 bb       	out	0x18, r24	; 24

	Sleep();
 14a:	98 df       	rcall	.-208    	; 0x7c <Sleep>
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <main>:
void Init_INT0(void);
void Sleep(void);

int main(void)
{
	LED_DDR	|= ((1<<PB4) | (1<<PB3) | (1<<PB2) | (1<<PB1));
 152:	87 b3       	in	r24, 0x17	; 23
 154:	8e 61       	ori	r24, 0x1E	; 30
 156:	87 bb       	out	0x17, r24	; 23
	LED_DDR	&= ~(1<<PB0);	
 158:	b8 98       	cbi	0x17, 0	; 23
	PULLUP_ON;
 15a:	c0 9a       	sbi	0x18, 0	; 24

	LED_PORT	= LED_OFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	88 bb       	out	0x18, r24	; 24

	Init_INT0();
 160:	76 df       	rcall	.-276    	; 0x4e <Init_INT0>
	
	Sleep();
 162:	8c df       	rcall	.-232    	; 0x7c <Sleep>
	
    while (1) 
    {
		if ((Interrupt & PINCHANGE0) == PINCHANGE0)
 164:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 168:	80 ff       	sbrs	r24, 0
 16a:	fc cf       	rjmp	.-8      	; 0x164 <main+0x12>
		{
			Interrupt &= ~0x01;
 16c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			ShakeIt();
 176:	99 df       	rcall	.-206    	; 0xaa <ShakeIt>
 178:	f5 cf       	rjmp	.-22     	; 0x164 <main+0x12>

0000017a <__divmodhi4>:
 17a:	97 fb       	bst	r25, 7
 17c:	07 2e       	mov	r0, r23
 17e:	16 f4       	brtc	.+4      	; 0x184 <__divmodhi4+0xa>
 180:	00 94       	com	r0
 182:	06 d0       	rcall	.+12     	; 0x190 <__divmodhi4_neg1>
 184:	77 fd       	sbrc	r23, 7
 186:	08 d0       	rcall	.+16     	; 0x198 <__divmodhi4_neg2>
 188:	0b d0       	rcall	.+22     	; 0x1a0 <__udivmodhi4>
 18a:	07 fc       	sbrc	r0, 7
 18c:	05 d0       	rcall	.+10     	; 0x198 <__divmodhi4_neg2>
 18e:	3e f4       	brtc	.+14     	; 0x19e <__divmodhi4_exit>

00000190 <__divmodhi4_neg1>:
 190:	90 95       	com	r25
 192:	81 95       	neg	r24
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	08 95       	ret

00000198 <__divmodhi4_neg2>:
 198:	70 95       	com	r23
 19a:	61 95       	neg	r22
 19c:	7f 4f       	sbci	r23, 0xFF	; 255

0000019e <__divmodhi4_exit>:
 19e:	08 95       	ret

000001a0 <__udivmodhi4>:
 1a0:	aa 1b       	sub	r26, r26
 1a2:	bb 1b       	sub	r27, r27
 1a4:	51 e1       	ldi	r21, 0x11	; 17
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <__udivmodhi4_ep>

000001a8 <__udivmodhi4_loop>:
 1a8:	aa 1f       	adc	r26, r26
 1aa:	bb 1f       	adc	r27, r27
 1ac:	a6 17       	cp	r26, r22
 1ae:	b7 07       	cpc	r27, r23
 1b0:	10 f0       	brcs	.+4      	; 0x1b6 <__udivmodhi4_ep>
 1b2:	a6 1b       	sub	r26, r22
 1b4:	b7 0b       	sbc	r27, r23

000001b6 <__udivmodhi4_ep>:
 1b6:	88 1f       	adc	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	5a 95       	dec	r21
 1bc:	a9 f7       	brne	.-22     	; 0x1a8 <__udivmodhi4_loop>
 1be:	80 95       	com	r24
 1c0:	90 95       	com	r25
 1c2:	bc 01       	movw	r22, r24
 1c4:	cd 01       	movw	r24, r26
 1c6:	08 95       	ret

000001c8 <do_rand>:
 1c8:	a0 e0       	ldi	r26, 0x00	; 0
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	e9 ee       	ldi	r30, 0xE9	; 233
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8a c0       	rjmp	.+276    	; 0x2e6 <__prologue_saves__+0xc>
 1d2:	ec 01       	movw	r28, r24
 1d4:	68 81       	ld	r22, Y
 1d6:	79 81       	ldd	r23, Y+1	; 0x01
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	9b 81       	ldd	r25, Y+3	; 0x03
 1dc:	61 15       	cp	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	81 05       	cpc	r24, r1
 1e2:	91 05       	cpc	r25, r1
 1e4:	21 f4       	brne	.+8      	; 0x1ee <do_rand+0x26>
 1e6:	64 e2       	ldi	r22, 0x24	; 36
 1e8:	79 ed       	ldi	r23, 0xD9	; 217
 1ea:	8b e5       	ldi	r24, 0x5B	; 91
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	2d e1       	ldi	r18, 0x1D	; 29
 1f0:	33 ef       	ldi	r19, 0xF3	; 243
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	38 d0       	rcall	.+112    	; 0x268 <__divmodsi4>
 1f8:	49 01       	movw	r8, r18
 1fa:	5a 01       	movw	r10, r20
 1fc:	27 ea       	ldi	r18, 0xA7	; 167
 1fe:	31 e4       	ldi	r19, 0x41	; 65
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	4d d0       	rcall	.+154    	; 0x2a0 <__mulsidi3>
 206:	69 01       	movw	r12, r18
 208:	7a 01       	movw	r14, r20
 20a:	c5 01       	movw	r24, r10
 20c:	b4 01       	movw	r22, r8
 20e:	2c ee       	ldi	r18, 0xEC	; 236
 210:	34 ef       	ldi	r19, 0xF4	; 244
 212:	4f ef       	ldi	r20, 0xFF	; 255
 214:	5f ef       	ldi	r21, 0xFF	; 255
 216:	44 d0       	rcall	.+136    	; 0x2a0 <__mulsidi3>
 218:	02 2f       	mov	r16, r18
 21a:	13 2f       	mov	r17, r19
 21c:	9a 01       	movw	r18, r20
 21e:	d7 01       	movw	r26, r14
 220:	c6 01       	movw	r24, r12
 222:	80 0f       	add	r24, r16
 224:	91 1f       	adc	r25, r17
 226:	a2 1f       	adc	r26, r18
 228:	b3 1f       	adc	r27, r19
 22a:	b7 ff       	sbrs	r27, 7
 22c:	03 c0       	rjmp	.+6      	; 0x234 <do_rand+0x6c>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	a1 09       	sbc	r26, r1
 232:	b0 48       	sbci	r27, 0x80	; 128
 234:	88 83       	st	Y, r24
 236:	99 83       	std	Y+1, r25	; 0x01
 238:	aa 83       	std	Y+2, r26	; 0x02
 23a:	bb 83       	std	Y+3, r27	; 0x03
 23c:	9f 77       	andi	r25, 0x7F	; 127
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	dd 27       	eor	r29, r29
 242:	ec e0       	ldi	r30, 0x0C	; 12
 244:	67 c0       	rjmp	.+206    	; 0x314 <__epilogue_restores__+0xc>

00000246 <rand_r>:
 246:	c0 df       	rcall	.-128    	; 0x1c8 <do_rand>
 248:	08 95       	ret

0000024a <rand>:
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	bc df       	rcall	.-136    	; 0x1c8 <do_rand>
 250:	08 95       	ret

00000252 <srand>:
 252:	a0 e0       	ldi	r26, 0x00	; 0
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 25a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 25e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 262:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 266:	08 95       	ret

00000268 <__divmodsi4>:
 268:	05 2e       	mov	r0, r21
 26a:	97 fb       	bst	r25, 7
 26c:	16 f4       	brtc	.+4      	; 0x272 <__divmodsi4+0xa>
 26e:	00 94       	com	r0
 270:	0f d0       	rcall	.+30     	; 0x290 <__negsi2>
 272:	57 fd       	sbrc	r21, 7
 274:	05 d0       	rcall	.+10     	; 0x280 <__divmodsi4_neg2>
 276:	5e d0       	rcall	.+188    	; 0x334 <__udivmodsi4>
 278:	07 fc       	sbrc	r0, 7
 27a:	02 d0       	rcall	.+4      	; 0x280 <__divmodsi4_neg2>
 27c:	46 f4       	brtc	.+16     	; 0x28e <__divmodsi4_exit>
 27e:	08 c0       	rjmp	.+16     	; 0x290 <__negsi2>

00000280 <__divmodsi4_neg2>:
 280:	50 95       	com	r21
 282:	40 95       	com	r20
 284:	30 95       	com	r19
 286:	21 95       	neg	r18
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	4f 4f       	sbci	r20, 0xFF	; 255
 28c:	5f 4f       	sbci	r21, 0xFF	; 255

0000028e <__divmodsi4_exit>:
 28e:	08 95       	ret

00000290 <__negsi2>:
 290:	90 95       	com	r25
 292:	80 95       	com	r24
 294:	70 95       	com	r23
 296:	61 95       	neg	r22
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	8f 4f       	sbci	r24, 0xFF	; 255
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	08 95       	ret

000002a0 <__mulsidi3>:
 2a0:	68 94       	set
 2a2:	00 13       	cpse	r16, r16

000002a4 <__umulsidi3>:
 2a4:	e8 94       	clt
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e8 e5       	ldi	r30, 0x58	; 88
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
 2ae:	1d c0       	rjmp	.+58     	; 0x2ea <__prologue_saves__+0x10>
 2b0:	ef ef       	ldi	r30, 0xFF	; 255
 2b2:	e7 f9       	bld	r30, 7
 2b4:	59 01       	movw	r10, r18
 2b6:	6a 01       	movw	r12, r20
 2b8:	5e 23       	and	r21, r30
 2ba:	55 0f       	add	r21, r21
 2bc:	ee 08       	sbc	r14, r14
 2be:	fe 2c       	mov	r15, r14
 2c0:	87 01       	movw	r16, r14
 2c2:	9b 01       	movw	r18, r22
 2c4:	ac 01       	movw	r20, r24
 2c6:	9e 23       	and	r25, r30
 2c8:	99 0f       	add	r25, r25
 2ca:	66 0b       	sbc	r22, r22
 2cc:	76 2f       	mov	r23, r22
 2ce:	cb 01       	movw	r24, r22
 2d0:	53 d0       	rcall	.+166    	; 0x378 <__muldi3>
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	dd 27       	eor	r29, r29
 2d6:	ea e0       	ldi	r30, 0x0A	; 10
 2d8:	1f c0       	rjmp	.+62     	; 0x318 <__epilogue_restores__+0x10>

000002da <__prologue_saves__>:
 2da:	2f 92       	push	r2
 2dc:	3f 92       	push	r3
 2de:	4f 92       	push	r4
 2e0:	5f 92       	push	r5
 2e2:	6f 92       	push	r6
 2e4:	7f 92       	push	r7
 2e6:	8f 92       	push	r8
 2e8:	9f 92       	push	r9
 2ea:	af 92       	push	r10
 2ec:	bf 92       	push	r11
 2ee:	cf 92       	push	r12
 2f0:	df 92       	push	r13
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	ca 1b       	sub	r28, r26
 302:	cd bf       	out	0x3d, r28	; 61
 304:	dd 27       	eor	r29, r29
 306:	09 94       	ijmp

00000308 <__epilogue_restores__>:
 308:	2a 88       	ldd	r2, Y+18	; 0x12
 30a:	39 88       	ldd	r3, Y+17	; 0x11
 30c:	48 88       	ldd	r4, Y+16	; 0x10
 30e:	5f 84       	ldd	r5, Y+15	; 0x0f
 310:	6e 84       	ldd	r6, Y+14	; 0x0e
 312:	7d 84       	ldd	r7, Y+13	; 0x0d
 314:	8c 84       	ldd	r8, Y+12	; 0x0c
 316:	9b 84       	ldd	r9, Y+11	; 0x0b
 318:	aa 84       	ldd	r10, Y+10	; 0x0a
 31a:	b9 84       	ldd	r11, Y+9	; 0x09
 31c:	c8 84       	ldd	r12, Y+8	; 0x08
 31e:	df 80       	ldd	r13, Y+7	; 0x07
 320:	ee 80       	ldd	r14, Y+6	; 0x06
 322:	fd 80       	ldd	r15, Y+5	; 0x05
 324:	0c 81       	ldd	r16, Y+4	; 0x04
 326:	1b 81       	ldd	r17, Y+3	; 0x03
 328:	aa 81       	ldd	r26, Y+2	; 0x02
 32a:	d9 81       	ldd	r29, Y+1	; 0x01
 32c:	ce 0f       	add	r28, r30
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	ca 2f       	mov	r28, r26
 332:	08 95       	ret

00000334 <__udivmodsi4>:
 334:	a1 e2       	ldi	r26, 0x21	; 33
 336:	1a 2e       	mov	r1, r26
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	fd 01       	movw	r30, r26
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__udivmodsi4_ep>

00000340 <__udivmodsi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ee 1f       	adc	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	a2 17       	cp	r26, r18
 34a:	b3 07       	cpc	r27, r19
 34c:	e4 07       	cpc	r30, r20
 34e:	f5 07       	cpc	r31, r21
 350:	20 f0       	brcs	.+8      	; 0x35a <__udivmodsi4_ep>
 352:	a2 1b       	sub	r26, r18
 354:	b3 0b       	sbc	r27, r19
 356:	e4 0b       	sbc	r30, r20
 358:	f5 0b       	sbc	r31, r21

0000035a <__udivmodsi4_ep>:
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	1a 94       	dec	r1
 364:	69 f7       	brne	.-38     	; 0x340 <__udivmodsi4_loop>
 366:	60 95       	com	r22
 368:	70 95       	com	r23
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	bd 01       	movw	r22, r26
 374:	cf 01       	movw	r24, r30
 376:	08 95       	ret

00000378 <__muldi3>:
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	9f 92       	push	r9
 37e:	a0 e4       	ldi	r26, 0x40	; 64
 380:	9a 2e       	mov	r9, r26
 382:	00 24       	eor	r0, r0
 384:	d0 01       	movw	r26, r0
 386:	e0 01       	movw	r28, r0
 388:	f0 01       	movw	r30, r0
 38a:	16 95       	lsr	r17
 38c:	07 95       	ror	r16
 38e:	f7 94       	ror	r15
 390:	e7 94       	ror	r14
 392:	d7 94       	ror	r13
 394:	c7 94       	ror	r12
 396:	b7 94       	ror	r11
 398:	a7 94       	ror	r10
 39a:	48 f4       	brcc	.+18     	; 0x3ae <__muldi3+0x36>
 39c:	10 68       	ori	r17, 0x80	; 128
 39e:	a2 0f       	add	r26, r18
 3a0:	b3 1f       	adc	r27, r19
 3a2:	c4 1f       	adc	r28, r20
 3a4:	d5 1f       	adc	r29, r21
 3a6:	e6 1f       	adc	r30, r22
 3a8:	f7 1f       	adc	r31, r23
 3aa:	08 1e       	adc	r0, r24
 3ac:	19 1e       	adc	r1, r25
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	44 1f       	adc	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	66 1f       	adc	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	9a 94       	dec	r9
 3c0:	21 f7       	brne	.-56     	; 0x38a <__muldi3+0x12>
 3c2:	9d 01       	movw	r18, r26
 3c4:	ae 01       	movw	r20, r28
 3c6:	bf 01       	movw	r22, r30
 3c8:	c0 01       	movw	r24, r0
 3ca:	11 24       	eor	r1, r1
 3cc:	9f 90       	pop	r9
 3ce:	cf 91       	pop	r28
 3d0:	df 91       	pop	r29
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
